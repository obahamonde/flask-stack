version: "3.3"

services:

  db:
    image: postgres:latest
    container_name: db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - default
    restart: unless-stopped
      
  queue:
    image: rabbitmq:3.7.7-management
    container_name: queue
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - ~/.docker/rabbitmq:/var/lib/rabbitmq
    networks:
      - default
    restart: always
    depends_on:
      - db

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - ~/.docker/redis:/data
    networks:
      - default
    restart: on-failure
    depends_on:
      - db

  bucket:
    image: minio/minio:latest
    container_name: bucket
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE
      - MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    volumes:
      - ./static:/data
    networks:
      - default 
    restart: always
    command: server /data --console-address ":9001"
    
  app:
    image: python:3.8.10-slim-buster
    build: .
    ports:
      - "4444"
    volumes:
      - .:/app
    networks:
      - default
    restart: always
    depends_on:
      - db
      - queue
      - redis
      - bucket

  worker:
    image: python:3.8.10-slim-buster
    container_name: worker
    build: .
    volumes:
      - .:/app
    networks:
      - default
    restart: always
    depends_on:
      - db
      - queue
      - redis
      - bucket

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - default
    restart: always
    depends_on:
      - app
      - worker
      - bucket
      - queue
      - redis
      
volumes:
  db:
  queue:
  redis:
  bucket:
  app:
  nginx:
  worker: